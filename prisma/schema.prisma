// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================
// ENUMS
// =============================================

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ClassType {
  REGULAR
  REINFORCEMENT
}

// =============================================
// CORE MODELS
// =============================================

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name") @db.VarChar(50)
  lastName     String   @map("last_name") @db.VarChar(50)
  dni          String   @unique @db.VarChar(8)
  role         Role
  phone        String?  @db.VarChar(15)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  teachingCourses    Course[]       @relation("TeacherCourses")
  enrollments        Enrollment[]   @relation("StudentEnrollments")
  attendanceRecords  Attendance[]   @relation("StudentAttendance")
  recordedAttendance Attendance[]   @relation("TeacherRecordedAttendance")
  payments           Payment[]      @relation("StudentPayments")
  recordedPayments   Payment[]      @relation("AdminRecordedPayments")
  reservations       Reservation[]  @relation("StudentReservations")
  notifications      Notification[]

  @@index([role])
  @@index([email])
  @@index([dni])
  @@map("users")
}

model Course {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @db.VarChar(100)
  description  String?  @db.Text
  subject      String   @db.VarChar(50)
  teacherId    String   @map("teacher_id") @db.Uuid
  capacity     Int      @default(25)
  monthlyPrice Decimal  @map("monthly_price") @db.Decimal(8, 2)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  teacher      User          @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Restrict)
  enrollments  Enrollment[]
  attendance   Attendance[]
  schedules    Schedule[]
  reservations Reservation[]

  @@map("courses")
}

model Schedule {
  id        String    @id @default(uuid()) @db.Uuid
  courseId  String    @map("course_id") @db.Uuid
  weekDay   WeekDay   @map("week_day")
  startTime DateTime  @map("start_time") @db.Time
  endTime   DateTime  @map("end_time") @db.Time
  classType ClassType @default(REGULAR) @map("class_type")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relaciones
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, weekDay, startTime])
  @@map("schedules")
}

model Enrollment {
  id             String           @id @default(uuid()) @db.Uuid
  studentId      String           @map("student_id") @db.Uuid
  courseId       String           @map("course_id") @db.Uuid
  enrollmentDate DateTime         @default(now()) @map("enrollment_date") @db.Timestamptz
  status         EnrollmentStatus @default(ACTIVE)
  notes          String?          @db.Text
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime         @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  student User   @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@index([status])
  @@map("enrollments")
}

model Attendance {
  id         String   @id @default(uuid()) @db.Uuid
  studentId  String   @map("student_id") @db.Uuid
  courseId   String   @map("course_id") @db.Uuid
  classDate  DateTime @map("class_date") @db.Date
  present    Boolean  @default(false)
  notes      String?  @db.Text
  recordedBy String?  @map("recorded_by") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  student  User   @relation("StudentAttendance", fields: [studentId], references: [id], onDelete: Cascade)
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  recorder User?  @relation("TeacherRecordedAttendance", fields: [recordedBy], references: [id])

  @@unique([studentId, courseId, classDate])
  @@index([studentId, courseId])
  @@index([classDate])
  @@map("attendances")
}

model Payment {
  id            String        @id @default(uuid()) @db.Uuid
  studentId     String        @map("student_id") @db.Uuid
  amount        Decimal       @db.Decimal(8, 2)
  concept       String        @db.VarChar(100)
  paymentDate   DateTime      @default(now()) @map("payment_date") @db.Timestamptz
  dueDate       DateTime?     @map("due_date") @db.Date
  status        PaymentStatus @default(PENDING)
  paymentMethod String?       @map("payment_method") @db.VarChar(30)
  receiptNumber String?       @unique @map("receipt_number") @db.VarChar(20)
  notes         String?       @db.Text
  recordedBy    String?       @map("recorded_by") @db.Uuid
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  student  User  @relation("StudentPayments", fields: [studentId], references: [id], onDelete: Cascade)
  recorder User? @relation("AdminRecordedPayments", fields: [recordedBy], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([dueDate])
  @@map("payments")
}

model Reservation {
  id          String    @id @default(uuid()) @db.Uuid
  studentId   String    @map("student_id") @db.Uuid
  courseId    String    @map("course_id") @db.Uuid
  classDate   DateTime  @map("class_date") @db.Date
  notes       String?   @db.Text
  isCancelled Boolean   @default(false) @map("is_cancelled")
  cancelledAt DateTime? @map("cancelled_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relaciones
  student User   @relation("StudentReservations", fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, classDate])
  @@index([studentId])
  @@index([courseId])
  @@index([classDate])
  @@map("reservations")
}

// =============================================
// NOTIFICATION SYSTEM (SIMPLIFIED)
// =============================================

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String   @db.VarChar(100)
  message   String   @db.Text
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relaciones
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@map("notifications")
}
